name: Validate API Version

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Extract current version from pom.xml
        id: current_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Extract main version from pom.xml
        id: main_version
        if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
        run: |
          git fetch origin main
          git checkout origin/main -- pom.xml 2>/dev/null || echo "0.0.0" > /tmp/main_version.txt
          if [ -f pom.xml ]; then
            MAIN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          else
            MAIN_VERSION="0.0.0"
          fi
          echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "Main version: $MAIN_VERSION"
          git checkout HEAD -- pom.xml 2>/dev/null || true
      
      - name: Compare versions
        if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          MAIN="${{ steps.main_version.outputs.version }}"
          
          echo "================================"
          echo "üîç Comparing project versions..."
          echo "================================"
          echo "Main branch version:    $MAIN"
          echo "Current branch version: $CURRENT"
          echo "================================"
          
          # Remove -SNAPSHOT suffix if present
          CURRENT_CLEAN=$(echo "$CURRENT" | sed 's/-SNAPSHOT//')
          MAIN_CLEAN=$(echo "$MAIN" | sed 's/-SNAPSHOT//')
          
          # Validate version format
          if ! [[ "$CURRENT_CLEAN" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Current version '$CURRENT_CLEAN' is not in valid format (X.Y.Z)"
            exit 1
          fi
          
          # Convert versions to comparable format
          IFS='.' read -r -a current_parts <<< "$CURRENT_CLEAN"
          IFS='.' read -r -a main_parts <<< "$MAIN_CLEAN"
          
          current_major="${current_parts[0]}"
          current_minor="${current_parts[1]}"
          current_patch="${current_parts[2]}"
          
          main_major="${main_parts[0]}"
          main_minor="${main_parts[1]}"
          main_patch="${main_parts[2]}"
          
          # Compare major version
          if [ "$current_major" -gt "$main_major" ]; then
            echo "‚úÖ Version is valid: Major version increased ($main_major ‚Üí $current_major)"
            exit 0
          elif [ "$current_major" -lt "$main_major" ]; then
            echo "‚ùå Error: Major version decreased ($main_major ‚Üí $current_major)"
            echo "Please ensure the version in pom.xml is greater than $MAIN"
            exit 1
          fi
          
          # Compare minor version
          if [ "$current_minor" -gt "$main_minor" ]; then
            echo "‚úÖ Version is valid: Minor version increased ($main_major.$main_minor ‚Üí $current_major.$current_minor)"
            exit 0
          elif [ "$current_minor" -lt "$main_minor" ]; then
            echo "‚ùå Error: Minor version decreased ($main_major.$main_minor ‚Üí $current_major.$current_minor)"
            echo "Please ensure the version in pom.xml is greater than $MAIN"
            exit 1
          fi
          
          # Compare patch version
          if [ "$current_patch" -gt "$main_patch" ]; then
            echo "‚úÖ Version is valid: Patch version increased ($MAIN_CLEAN ‚Üí $CURRENT_CLEAN)"
            exit 0
          elif [ "$current_patch" -lt "$main_patch" ]; then
            echo "‚ùå Error: Patch version decreased ($MAIN_CLEAN ‚Üí $CURRENT_CLEAN)"
            echo "Please ensure the version in pom.xml is greater than $MAIN"
            exit 1
          else
            echo "‚ùå Error: Version is the same as main branch ($MAIN_CLEAN)"
            echo "Please increment the version in pom.xml to be greater than $MAIN"
            echo ""
            echo "Suggestions:"
            echo "  - For bug fixes: $main_major.$main_minor.$((main_patch + 1))"
            echo "  - For new features: $main_major.$((main_minor + 1)).0"
            echo "  - For breaking changes: $((main_major + 1)).0.0"
            echo ""
            echo "Don't forget to update the version in OpenApiConfig.java as well!"
            exit 1
          fi
      
      - name: Log version for push to main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "‚úÖ Version ${{ steps.current_version.outputs.version }} merged to main"
